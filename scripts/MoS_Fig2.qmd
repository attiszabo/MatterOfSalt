---
title: "Figure 2"
subtitle: "*A matter of salt: global assessment of the effect of salt ionic composition as a driver of bacterial diversity*"
title-block-banner: true
author: 
    name: "Attila Szabo"
    affiliation: 
        - "Swedish University of Agricultural Sciences"
        - "Institute of Aquatic Ecology, HUN-REN CER"
    orcid: "0000-0002-7777-8166"
    email: "attila.szabo@slu.se"
date: 2024-01-14
license: "CC BY"
format:
    html:
        code-fold: true
        theme: flatly
        embed-resources: true
language:
  code-summary: Click to show code
code-tools: true
warning: false
---

### Setting up the R environment
```{r import packages}
library(tidyverse)    # 2.0.0, 
                      # permute 0.9-7, lubridate	1.9.2, forcats	1.0.0, stringr	1.5.0, 
                      # dplyr	1.1.2, purrr	1.0.1, readr	2.1.4, tidyr	1.3.0, tibble	3.2.1, 
                      # ggplot2	3.4.2 # ensure this version for compatibility with ggtree and ggnewscale
library(indicspecies) # 1.7.14
library(ggtree)       # 3.10.0
library(ggnewscale)   # 0.4.9
library(ggtreeExtra)  # 1.12.0
```

```{r set seed, print versions}
seed <- 14560722
set.seed(seed)
# R version:
  getRversion()
# print package versions
  insta_pack <- installed.packages()[names(sessionInfo()$otherPkgs), "Version"]
  knitr::kable(insta_pack, format = "markdown", align = "l")

```

R version: 4.3.0 

Seed is: `r format(round(seed))`

### Import data
``` {r import data}
# V4 OTUs
otu_table <- read.table("../data/V4_otutable99.shared", header = TRUE, dec = ".", na.strings = "?",
                        row.names = 2, sep ="\t") %>%
              select(-label, -numOtus)

# Sample metadata
meta <- read.csv("../data/V4_meta.csv", header = TRUE, na.strings = "?", row.names = 1,
                   fileEncoding = "latin1")

# Indicator OTUs merged with metadata
indi_data <- read.table("../data/indic_otus_data_type.txt", header=TRUE, na.strings = "?",
                        sep="\t", stringsAsFactors = FALSE, check.names = FALSE)  %>%
                        rename(., "label" = "otus")

otutax <- read.table("../data/V4_otus.98.80.80.taxonomy", header=TRUE,
                     row.names=2, sep="\t")

```

## Identifying OTUs indicating ionic composition types
```{r, indicator species}
# gather ionic composition type information of the samples:

ionic_comp_type <- meta$type

# perform the analysis for abundant OTUs (present with at least 1% relative abundance in one sample and present in 3 distinct samples (previously we rarefied to 2558 sequences per sample):

otu_abund <- otu_table %>%
  t() %>%
  as.data.frame() %>%
  filter(rowSums(. > 25) >= 1 & rowSums(. > 0) >= 3) %>%
  t() %>%
  as.data.frame()

# running the indicator species analysis from library 'indicspecies'

indicator_result <- multipatt(otu_abund, ionic_comp_type,
                              func = "r.g",
                              control = how(nperm=999))
summary_text <- capture.output(summary(indicator_result))
summary_text

# writeLines(summary_text, "indicator_summary.txt")

```
## Formatting metadata for tree visalization

```{r formatting metadata for visualization}

# the previous list of indicator OTUs were reformatted and merged with sample metadata to create a dataframe ('indic_otus_data_type.txt') we can use for tree visualization
# highlight salinity preference of each indicator OTU by weighting OTU abundance with sample salinity and getting its mean: 

# get OTU taxonomy from the TaxAss results

indi_otutax <- otutax[rownames(otutax) %in% indi_data$label, ]
indi_spec <- as.list(row.names(indi_otutax))
indi_otu <- t(otu_table) %>%
            .[rownames(.) %in% indi_spec, ] %>%
            t() %>%
            as.data.frame()

indi_otu_sal <- indi_otu * as.numeric(meta$Salinity)
indi_otu_sal_filt <- indi_otu_sal[complete.cases(indi_otu_sal),]
w_sal_list <- colSums(indi_otu_sal_filt)/colSums(indi_otu_sal_filt > 0)

indi_data_salw <- merge(w_sal_list, indi_data, by.x="row.names", by.y="label")
indi_data_sal <- rename(indi_data_salw, "label" = "Row.names", "w_sal_mean" = "x")

l_indi_data_sal <-pivot_longer(indi_data_sal, cols = 3:6)
l_indi_data_sal$name <- factor(l_indi_data_sal$name, levels=c("freshwater", "soda", "soda-saline", "saline"))
```

## Creating a phylogenetic tree

To create a phylogenetic tree of the indicator OTUs (n = 474), we will get back to mothur.
Indicator OTU IDs were extracted from 'indicator_summary.txt' to create a mothur compatible list 'indicotus.accnos'
Then using mothur we obtain the corresponding sequences from our representative OTU file:

```{bash, mothur, eval = FALSE}
mothur "#get.seqs(accnos=indicotus.accnos, fasta=otu.rep.mod.fasta)"

"Selected 474 sequences from your fasta file."

"Output File Names:"
"otu.rep.mod.pick.fasta"

And use the implementation of the clearcut program Sheneman et al., 2006; Bioinformatics) to create a tree: 

mothur "#clearcut(fasta=otu.rep.mod.pick.fasta, DNA=T, version=T)

"Output File Names:"
"otu.rep.mod.pick.tre"
```

## Visualizing phylogenetic tree of the indicator OTUs

```{r building tree}

# import the newick formatted phylogenetic tree created with mothur for the indicator OTUs

inditree <- read.tree("../data/otu.rep.mod.pick.tre")

# visualize with ggtree

q <- ggtree(inditree, layout = "radial")
q

# mapping node numbers

q + geom_text(aes(label=node), size = 1)

# defining colours of ionic composition types

cols <- c("freshwater" = "#B6E665", 
          "soda" ="#F8766D",
          "soda-saline" = "#C77CFF",
          "saline" = "#00BFC4")

# highlighting bacterial phyla

phyla <- data.frame(node=c(852, 777, 487, 609, 767, 903, 931, 888), phyl=c("Cyanobacteria", "Actinobacteriota", "Bacteroidota", "Proteobacteria", "Gemmatimonadota",  "Verrucomicrobiota", "Planctomycetota",  "Patescibacteria"))

# highlighting monophyletic groups representing a given type

inner_nodes <- data.frame(node=c(675, 794, 906, 767, 838, 507, 543, 653), 
                          lineage=c("betI", "Frankiales", "Verrucomicrobiales", "Gemmatimonadota",
                                    "Nitriliruptorales", "Cytophagales", "Flavobacteriaceae", "Enterobacterales"))

phyl_cols <- c("Cyanobacteria" = "paleturquoise1", "Actinobacteriota" = "coral1", 
               "Bacteroidota" = "olivedrab3", "Proteobacteria" = "dodgerblue3",
               "Gemmatimonadota" = "darkgoldenrod2",  "Verrucomicrobiota" = "deepskyblue",
               "Planctomycetota" = "yellow3", "Patescibacteria" = "hotpink4")

# colour the tree

pp <- q + geom_hilight(data=phyla, aes(node=node, fill=phyl), alpha =.4) +
          scale_fill_manual(name = "Phylum", values = phyl_cols,
                            guide = guide_legend(keywidth= 0.5,
                                                 keyheight= 0.5,
                                                 ncol = 2,
                                                 face = "bold",
                                                 title.position = "top"
                                                             )) +
          new_scale_fill() +
          geom_nodepoint(aes(subset = node == 675), fill="#B6E665",  size = 1.5, shape = 21, 
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 794), fill="#B6E665",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 906), fill="#F8766D",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 767), fill="#F8766D",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 838), fill="#F8766D",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 507), fill="#F8766D",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 543), fill="#00BFC4",  size = 1.5, shape = 21,
                         alpha =.9) +
          geom_nodepoint(aes(subset = node == 653), fill="#00BFC4",  size = 1.5, shape = 21,
                         alpha =.9)

pp

# create a heatmap which ionic composition type indicated by a given OTU, add weighted salinity means


pqr <- pp + new_scale_fill() +
            geom_fruit(data=l_indi_data_sal, geom=geom_tile,
                  mapping=aes(y=label, x = name, fill = name, alpha = value),
                  color = "grey50", size= 0.05, offset=0.04, height = 2) +
            scale_fill_manual(
                  name="Ionic composition type", values=cols, na.translate=FALSE,
                  guide=guide_legend(face = "bold",
                              keywidth=0.3,
                              keyheight=0.3,
                              nrow = 4,
                              title.position = "top"
                                      )) +
            scale_alpha_continuous(guide = "none", range = c(0, 1)) +
            new_scale_fill() + 
            geom_fruit(data=indi_data_sal, geom = geom_bar, 
                  mapping = aes(y = label, x = w_sal_mean), fill = "cadetblue3", pwidth=0.38,
                  col = "grey75", lwd = 0.1, orientation="y", stat="identity")
    
pqr + theme(legend.position = "bottom",
            legend.box = "horizontal",
            legend.justification = "center",
            legend.key.width = unit(0.5, "cm"),
            legend.key.height = unit(1, "cm"),
            legend.margin = margin(0, 0, 0, 0),
            plot.margin = margin(0, 0, 0, 0),
            text = element_text(size=12))

ggsave("Fig2.png", device = "png", scale = 1, width = 180, height = 180, units = c("mm"), dpi = 600)
ggsave("Fig2.svg", device = "svg", scale = 1, width = 180, height = 180, units = c("mm"), dpi = 600)

```
